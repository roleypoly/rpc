// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/backend/auth-backend.proto

package backend

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	shared1 "github.com/roleypoly/rpc/auth/shared"
	shared "github.com/roleypoly/rpc/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("auth/backend/auth-backend.proto", fileDescriptor_5436ad1a948af874)
}

var fileDescriptor_5436ad1a948af874 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x2c, 0x2d, 0xc9,
	0xd0, 0x4f, 0x4a, 0x4c, 0xce, 0x4e, 0xcd, 0x4b, 0xd1, 0x07, 0x71, 0x74, 0xa1, 0x1c, 0xbd, 0x82,
	0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xb1, 0xa2, 0xfc, 0x9c, 0xd4, 0xca, 0x82, 0xfc, 0x9c, 0x4a, 0x3d,
	0x90, 0xac, 0x1e, 0x54, 0x56, 0x4a, 0xb4, 0x38, 0x23, 0xb1, 0x28, 0x35, 0x45, 0x3f, 0x33, 0xaf,
	0x24, 0xb5, 0x28, 0x2f, 0x31, 0x07, 0xa2, 0x5c, 0x4a, 0x18, 0x2a, 0x0c, 0xa1, 0xa0, 0x82, 0x82,
	0x60, 0x4b, 0x90, 0x85, 0x8c, 0xe6, 0x32, 0x72, 0x71, 0x3b, 0x96, 0x96, 0x64, 0x38, 0x41, 0x8c,
	0x13, 0xf2, 0xe2, 0x12, 0x76, 0x4f, 0x2d, 0xf1, 0x4b, 0x2d, 0x07, 0x09, 0x3a, 0x67, 0x24, 0xe6,
	0xe4, 0xa4, 0xe6, 0xa5, 0xa7, 0x0a, 0x09, 0xe9, 0x21, 0xac, 0xf7, 0x74, 0x09, 0x2c, 0x4d, 0x2d,
	0xaa, 0x94, 0x92, 0xd5, 0x43, 0x73, 0x12, 0x8a, 0x16, 0x25, 0x06, 0x21, 0x27, 0x2e, 0x2e, 0xf7,
	0xd4, 0x92, 0xe0, 0xd4, 0xe2, 0xe2, 0xcc, 0xfc, 0x3c, 0x21, 0x51, 0x74, 0xe5, 0x21, 0xf9, 0xd9,
	0xa9, 0x79, 0x52, 0xd2, 0x48, 0xc2, 0x41, 0x30, 0x16, 0x54, 0x8f, 0x12, 0x83, 0x93, 0x7a, 0x94,
	0x6a, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x5c, 0xa9, 0x7e, 0x51,
	0x41, 0xb2, 0x3e, 0x72, 0x90, 0x25, 0xb1, 0x81, 0xfd, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x3a, 0xc9, 0x4e, 0x1b, 0x49, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthBackendClient is the client API for AuthBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthBackendClient interface {
	GetNewAuthChallenge(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared1.AuthChallenge, error)
	GetSession(ctx context.Context, in *shared1.Token, opts ...grpc.CallOption) (*shared.RoleypolySession, error)
}

type authBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthBackendClient(cc grpc.ClientConnInterface) AuthBackendClient {
	return &authBackendClient{cc}
}

func (c *authBackendClient) GetNewAuthChallenge(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared1.AuthChallenge, error) {
	out := new(shared1.AuthChallenge)
	err := c.cc.Invoke(ctx, "/roleypoly.auth.backend.AuthBackend/GetNewAuthChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authBackendClient) GetSession(ctx context.Context, in *shared1.Token, opts ...grpc.CallOption) (*shared.RoleypolySession, error) {
	out := new(shared.RoleypolySession)
	err := c.cc.Invoke(ctx, "/roleypoly.auth.backend.AuthBackend/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthBackendServer is the server API for AuthBackend service.
type AuthBackendServer interface {
	GetNewAuthChallenge(context.Context, *shared.IDQuery) (*shared1.AuthChallenge, error)
	GetSession(context.Context, *shared1.Token) (*shared.RoleypolySession, error)
}

// UnimplementedAuthBackendServer can be embedded to have forward compatible implementations.
type UnimplementedAuthBackendServer struct {
}

func (*UnimplementedAuthBackendServer) GetNewAuthChallenge(ctx context.Context, req *shared.IDQuery) (*shared1.AuthChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAuthChallenge not implemented")
}
func (*UnimplementedAuthBackendServer) GetSession(ctx context.Context, req *shared1.Token) (*shared.RoleypolySession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}

func RegisterAuthBackendServer(s *grpc.Server, srv AuthBackendServer) {
	s.RegisterService(&_AuthBackend_serviceDesc, srv)
}

func _AuthBackend_GetNewAuthChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthBackendServer).GetNewAuthChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.auth.backend.AuthBackend/GetNewAuthChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthBackendServer).GetNewAuthChallenge(ctx, req.(*shared.IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthBackend_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared1.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthBackendServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.auth.backend.AuthBackend/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthBackendServer).GetSession(ctx, req.(*shared1.Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "roleypoly.auth.backend.AuthBackend",
	HandlerType: (*AuthBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewAuthChallenge",
			Handler:    _AuthBackend_GetNewAuthChallenge_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _AuthBackend_GetSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/backend/auth-backend.proto",
}
