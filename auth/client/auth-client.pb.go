// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/client/auth-client.proto

package client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	shared "github.com/roleypoly/rpc/auth/shared"
	shared1 "github.com/roleypoly/rpc/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("auth/client/auth-client.proto", fileDescriptor_1833648300932cc9)
}

var fileDescriptor_1833648300932cc9 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x2b, 0x06, 0x06, 0x0f, 0x48, 0xb5, 0x14, 0x86, 0x54, 0x5d, 0x2a, 0xc4, 0x86, 0x2d,
	0xc1, 0x13, 0x94, 0x08, 0x75, 0x80, 0xa9, 0xc0, 0xc2, 0x96, 0x84, 0x9f, 0xd8, 0xc2, 0xf5, 0x45,
	0xb6, 0x83, 0x14, 0x5e, 0x89, 0x97, 0x44, 0xb1, 0x13, 0x54, 0x55, 0x64, 0xbb, 0xbb, 0xff, 0xbf,
	0xef, 0xee, 0x6c, 0xb6, 0x2e, 0xbb, 0xa0, 0x64, 0x6d, 0x34, 0x6c, 0x90, 0x43, 0x7c, 0x93, 0x62,
	0xd1, 0x3a, 0x0a, 0xc4, 0x33, 0x47, 0x06, 0x7d, 0x4b, 0xa6, 0x17, 0x83, 0x28, 0x92, 0x98, 0x67,
	0x5e, 0x95, 0x0e, 0xef, 0x52, 0xdb, 0x00, 0x67, 0x4b, 0x93, 0xdc, 0xf9, 0xaa, 0x21, 0x6a, 0x0c,
	0x64, 0xcc, 0xaa, 0xee, 0x43, 0xe2, 0xd0, 0x86, 0x7e, 0x14, 0x97, 0x71, 0x52, 0x6a, 0x4c, 0xa5,
	0xdb, 0x9f, 0x33, 0xc6, 0xb6, 0x5d, 0x50, 0x45, 0xa4, 0xf2, 0x2d, 0xbb, 0xd8, 0x21, 0xa4, 0xe4,
	0x85, 0x3e, 0x61, 0xf9, 0xa5, 0x48, 0x44, 0x31, 0x11, 0xc5, 0xc3, 0x40, 0xcc, 0x33, 0x71, 0xb2,
	0x57, 0xb4, 0x6f, 0x16, 0x7c, 0x17, 0x11, 0xaf, 0x1e, 0xee, 0x19, 0xde, 0x6b, 0x9a, 0x47, 0xac,
	0x8e, 0x10, 0xfb, 0x29, 0x1a, 0x9b, 0x36, 0x0b, 0x5e, 0xb0, 0xe5, 0x1e, 0x9e, 0xcc, 0x17, 0xc6,
	0xda, 0x23, 0x7a, 0xfe, 0xff, 0xd8, 0xf9, 0x6d, 0x9e, 0x18, 0x1f, 0xce, 0x23, 0xa7, 0xbf, 0x51,
	0xa8, 0xd2, 0x18, 0xd8, 0x06, 0x7c, 0x7d, 0x6a, 0x8f, 0x4f, 0x30, 0xc9, 0xb3, 0xb4, 0xfb, 0xeb,
	0xb7, 0xab, 0x46, 0x07, 0xd5, 0x55, 0xa2, 0xa6, 0x83, 0xfc, 0x33, 0x49, 0xd7, 0xd6, 0xf2, 0xe8,
	0x17, 0xab, 0xf3, 0x78, 0xe9, 0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xd8, 0x67, 0x3e,
	0xdb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthClientClient is the client API for AuthClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClientClient interface {
	GetClientToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared.Token, error)
	GetUserSession(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared1.RoleypolySession, error)
	ResolveSessionKey(ctx context.Context, in *shared.Token, opts ...grpc.CallOption) (*shared.Token, error)
	AuthorizeChallenge(ctx context.Context, in *shared.AuthChallenge, opts ...grpc.CallOption) (*shared.Token, error)
}

type authClientClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClientClient(cc grpc.ClientConnInterface) AuthClientClient {
	return &authClientClient{cc}
}

func (c *authClientClient) GetClientToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared.Token, error) {
	out := new(shared.Token)
	err := c.cc.Invoke(ctx, "/roleypoly.auth.client.AuthClient/GetClientToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClientClient) GetUserSession(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared1.RoleypolySession, error) {
	out := new(shared1.RoleypolySession)
	err := c.cc.Invoke(ctx, "/roleypoly.auth.client.AuthClient/GetUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClientClient) ResolveSessionKey(ctx context.Context, in *shared.Token, opts ...grpc.CallOption) (*shared.Token, error) {
	out := new(shared.Token)
	err := c.cc.Invoke(ctx, "/roleypoly.auth.client.AuthClient/ResolveSessionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClientClient) AuthorizeChallenge(ctx context.Context, in *shared.AuthChallenge, opts ...grpc.CallOption) (*shared.Token, error) {
	out := new(shared.Token)
	err := c.cc.Invoke(ctx, "/roleypoly.auth.client.AuthClient/AuthorizeChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthClientServer is the server API for AuthClient service.
type AuthClientServer interface {
	GetClientToken(context.Context, *empty.Empty) (*shared.Token, error)
	GetUserSession(context.Context, *empty.Empty) (*shared1.RoleypolySession, error)
	ResolveSessionKey(context.Context, *shared.Token) (*shared.Token, error)
	AuthorizeChallenge(context.Context, *shared.AuthChallenge) (*shared.Token, error)
}

// UnimplementedAuthClientServer can be embedded to have forward compatible implementations.
type UnimplementedAuthClientServer struct {
}

func (*UnimplementedAuthClientServer) GetClientToken(ctx context.Context, req *empty.Empty) (*shared.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientToken not implemented")
}
func (*UnimplementedAuthClientServer) GetUserSession(ctx context.Context, req *empty.Empty) (*shared1.RoleypolySession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSession not implemented")
}
func (*UnimplementedAuthClientServer) ResolveSessionKey(ctx context.Context, req *shared.Token) (*shared.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveSessionKey not implemented")
}
func (*UnimplementedAuthClientServer) AuthorizeChallenge(ctx context.Context, req *shared.AuthChallenge) (*shared.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeChallenge not implemented")
}

func RegisterAuthClientServer(s *grpc.Server, srv AuthClientServer) {
	s.RegisterService(&_AuthClient_serviceDesc, srv)
}

func _AuthClient_GetClientToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthClientServer).GetClientToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.auth.client.AuthClient/GetClientToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthClientServer).GetClientToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthClient_GetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthClientServer).GetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.auth.client.AuthClient/GetUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthClientServer).GetUserSession(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthClient_ResolveSessionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthClientServer).ResolveSessionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.auth.client.AuthClient/ResolveSessionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthClientServer).ResolveSessionKey(ctx, req.(*shared.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthClient_AuthorizeChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.AuthChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthClientServer).AuthorizeChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.auth.client.AuthClient/AuthorizeChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthClientServer).AuthorizeChallenge(ctx, req.(*shared.AuthChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "roleypoly.auth.client.AuthClient",
	HandlerType: (*AuthClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientToken",
			Handler:    _AuthClient_GetClientToken_Handler,
		},
		{
			MethodName: "GetUserSession",
			Handler:    _AuthClient_GetUserSession_Handler,
		},
		{
			MethodName: "ResolveSessionKey",
			Handler:    _AuthClient_ResolveSessionKey_Handler,
		},
		{
			MethodName: "AuthorizeChallenge",
			Handler:    _AuthClient_AuthorizeChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/client/auth-client.proto",
}
