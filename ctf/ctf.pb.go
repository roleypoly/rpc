// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.2
// source: ctf/ctf.proto

package ctf

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Flags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags []*Flag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Flags) Reset() {
	*x = Flags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctf_ctf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flags) ProtoMessage() {}

func (x *Flags) ProtoReflect() protoreflect.Message {
	mi := &file_ctf_ctf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flags.ProtoReflect.Descriptor instead.
func (*Flags) Descriptor() ([]byte, []int) {
	return file_ctf_ctf_proto_rawDescGZIP(), []int{0}
}

func (x *Flags) GetFlags() []*Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ring int32  `protobuf:"varint,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctf_ctf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_ctf_ctf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_ctf_ctf_proto_rawDescGZIP(), []int{1}
}

func (x *Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flag) GetRing() int32 {
	if x != nil {
		return x.Ring
	}
	return 0
}

type Ring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ring int32 `protobuf:"varint,1,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (x *Ring) Reset() {
	*x = Ring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctf_ctf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ring) ProtoMessage() {}

func (x *Ring) ProtoReflect() protoreflect.Message {
	mi := &file_ctf_ctf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ring.ProtoReflect.Descriptor instead.
func (*Ring) Descriptor() ([]byte, []int) {
	return file_ctf_ctf_proto_rawDescGZIP(), []int{2}
}

func (x *Ring) GetRing() int32 {
	if x != nil {
		return x.Ring
	}
	return 0
}

var File_ctf_ctf_proto protoreflect.FileDescriptor

var file_ctf_ctf_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x74, 0x66, 0x2f, 0x63, 0x74, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e, 0x63, 0x74, 0x66, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e,
	0x63, 0x74, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x2e, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x1a, 0x0a, 0x04, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x32, 0xf4, 0x01, 0x0a, 0x03,
	0x43, 0x54, 0x46, 0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x13, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e,
	0x63, 0x74, 0x66, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x79,
	0x70, 0x6f, 0x6c, 0x79, 0x2e, 0x63, 0x74, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13,
	0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e, 0x63, 0x74, 0x66, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x1a, 0x13, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e,
	0x63, 0x74, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13, 0x2e, 0x72, 0x6f, 0x6c, 0x65,
	0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e, 0x63, 0x74, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x1a, 0x13,
	0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e, 0x63, 0x74, 0x66, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x13, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2e,
	0x63, 0x74, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x79, 0x70, 0x6f, 0x6c, 0x79, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63,
	0x74, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ctf_ctf_proto_rawDescOnce sync.Once
	file_ctf_ctf_proto_rawDescData = file_ctf_ctf_proto_rawDesc
)

func file_ctf_ctf_proto_rawDescGZIP() []byte {
	file_ctf_ctf_proto_rawDescOnce.Do(func() {
		file_ctf_ctf_proto_rawDescData = protoimpl.X.CompressGZIP(file_ctf_ctf_proto_rawDescData)
	})
	return file_ctf_ctf_proto_rawDescData
}

var file_ctf_ctf_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ctf_ctf_proto_goTypes = []interface{}{
	(*Flags)(nil),       // 0: roleypoly.ctf.Flags
	(*Flag)(nil),        // 1: roleypoly.ctf.Flag
	(*Ring)(nil),        // 2: roleypoly.ctf.Ring
	(*empty.Empty)(nil), // 3: google.protobuf.Empty
}
var file_ctf_ctf_proto_depIdxs = []int32{
	1, // 0: roleypoly.ctf.Flags.flags:type_name -> roleypoly.ctf.Flag
	2, // 1: roleypoly.ctf.CTF.GetRingFlags:input_type -> roleypoly.ctf.Ring
	1, // 2: roleypoly.ctf.CTF.CreateFlag:input_type -> roleypoly.ctf.Flag
	1, // 3: roleypoly.ctf.CTF.PromoteFlag:input_type -> roleypoly.ctf.Flag
	1, // 4: roleypoly.ctf.CTF.RemoveFlag:input_type -> roleypoly.ctf.Flag
	0, // 5: roleypoly.ctf.CTF.GetRingFlags:output_type -> roleypoly.ctf.Flags
	1, // 6: roleypoly.ctf.CTF.CreateFlag:output_type -> roleypoly.ctf.Flag
	1, // 7: roleypoly.ctf.CTF.PromoteFlag:output_type -> roleypoly.ctf.Flag
	3, // 8: roleypoly.ctf.CTF.RemoveFlag:output_type -> google.protobuf.Empty
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ctf_ctf_proto_init() }
func file_ctf_ctf_proto_init() {
	if File_ctf_ctf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ctf_ctf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctf_ctf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctf_ctf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ctf_ctf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ctf_ctf_proto_goTypes,
		DependencyIndexes: file_ctf_ctf_proto_depIdxs,
		MessageInfos:      file_ctf_ctf_proto_msgTypes,
	}.Build()
	File_ctf_ctf_proto = out.File
	file_ctf_ctf_proto_rawDesc = nil
	file_ctf_ctf_proto_goTypes = nil
	file_ctf_ctf_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CTFClient is the client API for CTF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CTFClient interface {
	GetRingFlags(ctx context.Context, in *Ring, opts ...grpc.CallOption) (*Flags, error)
	CreateFlag(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*Flag, error)
	PromoteFlag(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*Flag, error)
	RemoveFlag(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cTFClient struct {
	cc grpc.ClientConnInterface
}

func NewCTFClient(cc grpc.ClientConnInterface) CTFClient {
	return &cTFClient{cc}
}

func (c *cTFClient) GetRingFlags(ctx context.Context, in *Ring, opts ...grpc.CallOption) (*Flags, error) {
	out := new(Flags)
	err := c.cc.Invoke(ctx, "/roleypoly.ctf.CTF/GetRingFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTFClient) CreateFlag(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*Flag, error) {
	out := new(Flag)
	err := c.cc.Invoke(ctx, "/roleypoly.ctf.CTF/CreateFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTFClient) PromoteFlag(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*Flag, error) {
	out := new(Flag)
	err := c.cc.Invoke(ctx, "/roleypoly.ctf.CTF/PromoteFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTFClient) RemoveFlag(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/roleypoly.ctf.CTF/RemoveFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CTFServer is the server API for CTF service.
type CTFServer interface {
	GetRingFlags(context.Context, *Ring) (*Flags, error)
	CreateFlag(context.Context, *Flag) (*Flag, error)
	PromoteFlag(context.Context, *Flag) (*Flag, error)
	RemoveFlag(context.Context, *Flag) (*empty.Empty, error)
}

// UnimplementedCTFServer can be embedded to have forward compatible implementations.
type UnimplementedCTFServer struct {
}

func (*UnimplementedCTFServer) GetRingFlags(context.Context, *Ring) (*Flags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRingFlags not implemented")
}
func (*UnimplementedCTFServer) CreateFlag(context.Context, *Flag) (*Flag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlag not implemented")
}
func (*UnimplementedCTFServer) PromoteFlag(context.Context, *Flag) (*Flag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteFlag not implemented")
}
func (*UnimplementedCTFServer) RemoveFlag(context.Context, *Flag) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFlag not implemented")
}

func RegisterCTFServer(s *grpc.Server, srv CTFServer) {
	s.RegisterService(&_CTF_serviceDesc, srv)
}

func _CTF_GetRingFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ring)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTFServer).GetRingFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.ctf.CTF/GetRingFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTFServer).GetRingFlags(ctx, req.(*Ring))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTF_CreateFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTFServer).CreateFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.ctf.CTF/CreateFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTFServer).CreateFlag(ctx, req.(*Flag))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTF_PromoteFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTFServer).PromoteFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.ctf.CTF/PromoteFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTFServer).PromoteFlag(ctx, req.(*Flag))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTF_RemoveFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTFServer).RemoveFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.ctf.CTF/RemoveFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTFServer).RemoveFlag(ctx, req.(*Flag))
	}
	return interceptor(ctx, in, info, handler)
}

var _CTF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "roleypoly.ctf.CTF",
	HandlerType: (*CTFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRingFlags",
			Handler:    _CTF_GetRingFlags_Handler,
		},
		{
			MethodName: "CreateFlag",
			Handler:    _CTF_CreateFlag_Handler,
		},
		{
			MethodName: "PromoteFlag",
			Handler:    _CTF_PromoteFlag_Handler,
		},
		{
			MethodName: "RemoveFlag",
			Handler:    _CTF_RemoveFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ctf/ctf.proto",
}
