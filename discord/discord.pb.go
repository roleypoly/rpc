// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discord/discord.proto

package discord

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	shared "github.com/roleypoly/rpc/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GuildMembers struct {
	ID                   string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Members              []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GuildMembers) Reset()         { *m = GuildMembers{} }
func (m *GuildMembers) String() string { return proto.CompactTextString(m) }
func (*GuildMembers) ProtoMessage()    {}
func (*GuildMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa569a6aa3df0e67, []int{0}
}

func (m *GuildMembers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuildMembers.Unmarshal(m, b)
}
func (m *GuildMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuildMembers.Marshal(b, m, deterministic)
}
func (m *GuildMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildMembers.Merge(m, src)
}
func (m *GuildMembers) XXX_Size() int {
	return xxx_messageInfo_GuildMembers.Size(m)
}
func (m *GuildMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildMembers.DiscardUnknown(m)
}

var xxx_messageInfo_GuildMembers proto.InternalMessageInfo

func (m *GuildMembers) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GuildMembers) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type Member struct {
	GuildID              string              `protobuf:"bytes,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Roles                []string            `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Nick                 string              `protobuf:"bytes,4,opt,name=nick,proto3" json:"nick,omitempty"`
	User                 *shared.DiscordUser `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa569a6aa3df0e67, []int{1}
}

func (m *Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Member.Unmarshal(m, b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Member.Marshal(b, m, deterministic)
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return xxx_messageInfo_Member.Size(m)
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetGuildID() string {
	if m != nil {
		return m.GuildID
	}
	return ""
}

func (m *Member) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Member) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *Member) GetUser() *shared.DiscordUser {
	if m != nil {
		return m.User
	}
	return nil
}

type ShardInfo struct {
	Shards               int32    `protobuf:"varint,1,opt,name=shards,proto3" json:"shards,omitempty"`
	Servers              int32    `protobuf:"varint,2,opt,name=servers,proto3" json:"servers,omitempty"`
	Users                int32    `protobuf:"varint,3,opt,name=users,proto3" json:"users,omitempty"`
	Roles                int32    `protobuf:"varint,4,opt,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardInfo) Reset()         { *m = ShardInfo{} }
func (m *ShardInfo) String() string { return proto.CompactTextString(m) }
func (*ShardInfo) ProtoMessage()    {}
func (*ShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa569a6aa3df0e67, []int{2}
}

func (m *ShardInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardInfo.Unmarshal(m, b)
}
func (m *ShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardInfo.Marshal(b, m, deterministic)
}
func (m *ShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardInfo.Merge(m, src)
}
func (m *ShardInfo) XXX_Size() int {
	return xxx_messageInfo_ShardInfo.Size(m)
}
func (m *ShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShardInfo proto.InternalMessageInfo

func (m *ShardInfo) GetShards() int32 {
	if m != nil {
		return m.Shards
	}
	return 0
}

func (m *ShardInfo) GetServers() int32 {
	if m != nil {
		return m.Servers
	}
	return 0
}

func (m *ShardInfo) GetUsers() int32 {
	if m != nil {
		return m.Users
	}
	return 0
}

func (m *ShardInfo) GetRoles() int32 {
	if m != nil {
		return m.Roles
	}
	return 0
}

func init() {
	proto.RegisterType((*GuildMembers)(nil), "roleypoly.discord.GuildMembers")
	proto.RegisterType((*Member)(nil), "roleypoly.discord.Member")
	proto.RegisterType((*ShardInfo)(nil), "roleypoly.discord.ShardInfo")
}

func init() {
	proto.RegisterFile("discord/discord.proto", fileDescriptor_fa569a6aa3df0e67)
}

var fileDescriptor_fa569a6aa3df0e67 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x75, 0x3e, 0x4d, 0xa6, 0x05, 0xd1, 0xa1, 0x8d, 0x4c, 0xb8, 0x58, 0x7b, 0x8a, 0x38, 0xac,
	0xa5, 0xf4, 0xc0, 0x81, 0x48, 0x48, 0x95, 0xc1, 0xb2, 0x04, 0x42, 0xb8, 0xea, 0x85, 0x5b, 0x6c,
	0x6f, 0x1d, 0x0b, 0x3b, 0x6b, 0xed, 0xda, 0x80, 0xff, 0x38, 0x67, 0xb4, 0xbb, 0x76, 0x89, 0x4a,
	0xdc, 0xd3, 0x66, 0x66, 0xde, 0x9b, 0xf7, 0x76, 0x5f, 0x0c, 0x57, 0x69, 0x2e, 0x13, 0x2e, 0x52,
	0xaf, 0x3b, 0x69, 0x25, 0x78, 0xcd, 0xf1, 0x42, 0xf0, 0x82, 0xb5, 0x15, 0x2f, 0x5a, 0xda, 0x0d,
	0x56, 0x6f, 0x32, 0xce, 0xb3, 0x82, 0x79, 0x1a, 0x10, 0x37, 0xf7, 0x1e, 0x2b, 0xab, 0xba, 0x35,
	0xf8, 0xd5, 0x2b, 0xb9, 0xdf, 0x09, 0x96, 0x7a, 0xe6, 0x30, 0x4d, 0x72, 0x0b, 0xe7, 0x41, 0x93,
	0x17, 0xe9, 0x17, 0x56, 0xc6, 0x4c, 0x48, 0x7c, 0x01, 0xe3, 0xd0, 0x77, 0x46, 0xee, 0x68, 0xbd,
	0x88, 0xc6, 0xa1, 0x8f, 0xd7, 0x60, 0x97, 0x66, 0xe4, 0x8c, 0xdd, 0xc9, 0xfa, 0x6c, 0xf3, 0x9a,
	0xfe, 0x27, 0x4b, 0x0d, 0x39, 0xea, 0x91, 0xe4, 0x37, 0xcc, 0x4d, 0x0b, 0x1d, 0xb0, 0x33, 0xb5,
	0xfe, 0x61, 0x67, 0x5f, 0xe2, 0x25, 0xcc, 0xd4, 0x22, 0xe9, 0x4c, 0xdc, 0xc9, 0x7a, 0x11, 0x99,
	0x02, 0x11, 0xa6, 0x87, 0x3c, 0xf9, 0xe1, 0x4c, 0x35, 0x58, 0xff, 0xc6, 0xb7, 0x30, 0x6d, 0x24,
	0x13, 0xce, 0xcc, 0x1d, 0xad, 0xcf, 0x36, 0xcb, 0x23, 0x7d, 0xdf, 0xe8, 0xdf, 0x49, 0x26, 0x22,
	0x8d, 0x21, 0x39, 0x2c, 0x6e, 0xf7, 0x3b, 0x91, 0x86, 0x87, 0x7b, 0x8e, 0x4b, 0x98, 0xab, 0xbb,
	0xa6, 0x52, 0x6b, 0xcf, 0xa2, 0xae, 0x52, 0xa6, 0x24, 0x13, 0x3f, 0xcd, 0x9d, 0xd4, 0xa0, 0x2f,
	0x95, 0x29, 0xb5, 0x46, 0x99, 0x52, 0x7d, 0x53, 0xfc, 0xb3, 0x3a, 0x35, 0x5d, 0x5d, 0x6c, 0xfe,
	0x4c, 0xc0, 0xee, 0x0c, 0xe0, 0x16, 0xe0, 0x73, 0x2e, 0x6b, 0xfd, 0x92, 0x12, 0x97, 0xd4, 0xc4,
	0x40, 0xfb, 0x18, 0xe8, 0x47, 0x15, 0xc3, 0xea, 0xf2, 0xc8, 0xba, 0x86, 0x2a, 0x0e, 0xb1, 0x70,
	0x03, 0xcf, 0x02, 0x66, 0xc8, 0x88, 0x47, 0x98, 0xd0, 0xff, 0xd6, 0x30, 0xd1, 0xae, 0x5e, 0x3e,
	0xe6, 0x11, 0x0b, 0xb7, 0xf0, 0xbc, 0xe7, 0x44, 0xe6, 0xe5, 0x4e, 0x10, 0xaf, 0x1e, 0x13, 0x35,
	0x94, 0x58, 0xf8, 0x01, 0x2e, 0x7a, 0xb6, 0xbc, 0x69, 0xbb, 0xac, 0x4e, 0x6d, 0x18, 0xb2, 0xbc,
	0x85, 0x45, 0xc0, 0xea, 0x27, 0x88, 0xc3, 0x7f, 0x13, 0x62, 0xe1, 0x3b, 0xb0, 0x03, 0x56, 0xab,
	0xd8, 0x4e, 0x72, 0x07, 0x22, 0x26, 0x16, 0x7e, 0x82, 0xf3, 0xbb, 0x2a, 0xdd, 0xd5, 0xac, 0x53,
	0x1e, 0x56, 0x79, 0xda, 0xc0, 0x7b, 0xb0, 0xbf, 0xfe, 0x3a, 0x68, 0x03, 0x43, 0x61, 0x0d, 0x9a,
	0xb8, 0x21, 0xdf, 0xdd, 0x2c, 0xaf, 0xf7, 0x4d, 0x4c, 0x13, 0x5e, 0x7a, 0x0f, 0x28, 0x4f, 0x54,
	0x49, 0xff, 0x85, 0xc6, 0x73, 0xbd, 0xed, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x5d,
	0xbc, 0xc7, 0xbb, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiscordClient is the client API for Discord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscordClient interface {
	ListGuilds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared.GuildList, error)
	GetGuild(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.Guild, error)
	GetGuildRoles(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.GuildRoles, error)
	GetGuildsByMember(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.GuildList, error)
	GetMember(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*Member, error)
	GetUser(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.DiscordUser, error)
	UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	OwnUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared.DiscordUser, error)
}

type discordClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordClient(cc grpc.ClientConnInterface) DiscordClient {
	return &discordClient{cc}
}

func (c *discordClient) ListGuilds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared.GuildList, error) {
	out := new(shared.GuildList)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/ListGuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetGuild(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.Guild, error) {
	out := new(shared.Guild)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/GetGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetGuildRoles(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.GuildRoles, error) {
	out := new(shared.GuildRoles)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/GetGuildRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetGuildsByMember(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.GuildList, error) {
	out := new(shared.GuildList)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/GetGuildsByMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetMember(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) GetUser(ctx context.Context, in *shared.IDQuery, opts ...grpc.CallOption) (*shared.DiscordUser, error) {
	out := new(shared.DiscordUser)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) OwnUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shared.DiscordUser, error) {
	out := new(shared.DiscordUser)
	err := c.cc.Invoke(ctx, "/roleypoly.discord.Discord/OwnUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServer is the server API for Discord service.
type DiscordServer interface {
	ListGuilds(context.Context, *empty.Empty) (*shared.GuildList, error)
	GetGuild(context.Context, *shared.IDQuery) (*shared.Guild, error)
	GetGuildRoles(context.Context, *shared.IDQuery) (*shared.GuildRoles, error)
	GetGuildsByMember(context.Context, *shared.IDQuery) (*shared.GuildList, error)
	GetMember(context.Context, *shared.IDQuery) (*Member, error)
	GetUser(context.Context, *shared.IDQuery) (*shared.DiscordUser, error)
	UpdateMember(context.Context, *Member) (*Member, error)
	OwnUser(context.Context, *empty.Empty) (*shared.DiscordUser, error)
}

// UnimplementedDiscordServer can be embedded to have forward compatible implementations.
type UnimplementedDiscordServer struct {
}

func (*UnimplementedDiscordServer) ListGuilds(ctx context.Context, req *empty.Empty) (*shared.GuildList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuilds not implemented")
}
func (*UnimplementedDiscordServer) GetGuild(ctx context.Context, req *shared.IDQuery) (*shared.Guild, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuild not implemented")
}
func (*UnimplementedDiscordServer) GetGuildRoles(ctx context.Context, req *shared.IDQuery) (*shared.GuildRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildRoles not implemented")
}
func (*UnimplementedDiscordServer) GetGuildsByMember(ctx context.Context, req *shared.IDQuery) (*shared.GuildList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildsByMember not implemented")
}
func (*UnimplementedDiscordServer) GetMember(ctx context.Context, req *shared.IDQuery) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (*UnimplementedDiscordServer) GetUser(ctx context.Context, req *shared.IDQuery) (*shared.DiscordUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedDiscordServer) UpdateMember(ctx context.Context, req *Member) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (*UnimplementedDiscordServer) OwnUser(ctx context.Context, req *empty.Empty) (*shared.DiscordUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnUser not implemented")
}

func RegisterDiscordServer(s *grpc.Server, srv DiscordServer) {
	s.RegisterService(&_Discord_serviceDesc, srv)
}

func _Discord_ListGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ListGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/ListGuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ListGuilds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/GetGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuild(ctx, req.(*shared.IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetGuildRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuildRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/GetGuildRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuildRoles(ctx, req.(*shared.IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetGuildsByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetGuildsByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/GetGuildsByMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetGuildsByMember(ctx, req.(*shared.IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetMember(ctx, req.(*shared.IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).GetUser(ctx, req.(*shared.IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).UpdateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_OwnUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).OwnUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roleypoly.discord.Discord/OwnUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).OwnUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "roleypoly.discord.Discord",
	HandlerType: (*DiscordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGuilds",
			Handler:    _Discord_ListGuilds_Handler,
		},
		{
			MethodName: "GetGuild",
			Handler:    _Discord_GetGuild_Handler,
		},
		{
			MethodName: "GetGuildRoles",
			Handler:    _Discord_GetGuildRoles_Handler,
		},
		{
			MethodName: "GetGuildsByMember",
			Handler:    _Discord_GetGuildsByMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _Discord_GetMember_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Discord_GetUser_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Discord_UpdateMember_Handler,
		},
		{
			MethodName: "OwnUser",
			Handler:    _Discord_OwnUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord/discord.proto",
}
