// source: discord/discord.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var shared_shared_pb = require('../shared/shared_pb.js');
goog.object.extend(proto, shared_shared_pb);
goog.exportSymbol('proto.roleypoly.discord.GuildMembers', null, global);
goog.exportSymbol('proto.roleypoly.discord.Member', null, global);
goog.exportSymbol('proto.roleypoly.discord.ShardInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.roleypoly.discord.GuildMembers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.roleypoly.discord.GuildMembers.repeatedFields_, null);
};
goog.inherits(proto.roleypoly.discord.GuildMembers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.roleypoly.discord.GuildMembers.displayName = 'proto.roleypoly.discord.GuildMembers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.roleypoly.discord.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.roleypoly.discord.Member.repeatedFields_, null);
};
goog.inherits(proto.roleypoly.discord.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.roleypoly.discord.Member.displayName = 'proto.roleypoly.discord.Member';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.roleypoly.discord.ShardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.roleypoly.discord.ShardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.roleypoly.discord.ShardInfo.displayName = 'proto.roleypoly.discord.ShardInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.roleypoly.discord.GuildMembers.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.roleypoly.discord.GuildMembers.prototype.toObject = function(opt_includeInstance) {
  return proto.roleypoly.discord.GuildMembers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.roleypoly.discord.GuildMembers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.roleypoly.discord.GuildMembers.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.roleypoly.discord.Member.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.roleypoly.discord.GuildMembers}
 */
proto.roleypoly.discord.GuildMembers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.roleypoly.discord.GuildMembers;
  return proto.roleypoly.discord.GuildMembers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.roleypoly.discord.GuildMembers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.roleypoly.discord.GuildMembers}
 */
proto.roleypoly.discord.GuildMembers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.roleypoly.discord.Member;
      reader.readMessage(value,proto.roleypoly.discord.Member.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.roleypoly.discord.GuildMembers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.roleypoly.discord.GuildMembers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.roleypoly.discord.GuildMembers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.roleypoly.discord.GuildMembers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.roleypoly.discord.Member.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.roleypoly.discord.GuildMembers.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.roleypoly.discord.GuildMembers} returns this
 */
proto.roleypoly.discord.GuildMembers.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Member members = 2;
 * @return {!Array<!proto.roleypoly.discord.Member>}
 */
proto.roleypoly.discord.GuildMembers.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.roleypoly.discord.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.roleypoly.discord.Member, 2));
};


/**
 * @param {!Array<!proto.roleypoly.discord.Member>} value
 * @return {!proto.roleypoly.discord.GuildMembers} returns this
*/
proto.roleypoly.discord.GuildMembers.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.roleypoly.discord.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.roleypoly.discord.Member}
 */
proto.roleypoly.discord.GuildMembers.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.roleypoly.discord.Member, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.roleypoly.discord.GuildMembers} returns this
 */
proto.roleypoly.discord.GuildMembers.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.roleypoly.discord.Member.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.roleypoly.discord.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.roleypoly.discord.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.roleypoly.discord.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.roleypoly.discord.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rolesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    nick: jspb.Message.getFieldWithDefault(msg, 4, ""),
    user: (f = msg.getUser()) && shared_shared_pb.DiscordUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.roleypoly.discord.Member}
 */
proto.roleypoly.discord.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.roleypoly.discord.Member;
  return proto.roleypoly.discord.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.roleypoly.discord.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.roleypoly.discord.Member}
 */
proto.roleypoly.discord.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuildid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNick(value);
      break;
    case 5:
      var value = new shared_shared_pb.DiscordUser;
      reader.readMessage(value,shared_shared_pb.DiscordUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.roleypoly.discord.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.roleypoly.discord.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.roleypoly.discord.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.roleypoly.discord.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getNick();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      shared_shared_pb.DiscordUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string guildID = 1;
 * @return {string}
 */
proto.roleypoly.discord.Member.prototype.getGuildid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.roleypoly.discord.Member} returns this
 */
proto.roleypoly.discord.Member.prototype.setGuildid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string roles = 3;
 * @return {!Array<string>}
 */
proto.roleypoly.discord.Member.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.roleypoly.discord.Member} returns this
 */
proto.roleypoly.discord.Member.prototype.setRolesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.roleypoly.discord.Member} returns this
 */
proto.roleypoly.discord.Member.prototype.addRoles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.roleypoly.discord.Member} returns this
 */
proto.roleypoly.discord.Member.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};


/**
 * optional string nick = 4;
 * @return {string}
 */
proto.roleypoly.discord.Member.prototype.getNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.roleypoly.discord.Member} returns this
 */
proto.roleypoly.discord.Member.prototype.setNick = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional roleypoly.DiscordUser user = 5;
 * @return {?proto.roleypoly.DiscordUser}
 */
proto.roleypoly.discord.Member.prototype.getUser = function() {
  return /** @type{?proto.roleypoly.DiscordUser} */ (
    jspb.Message.getWrapperField(this, shared_shared_pb.DiscordUser, 5));
};


/**
 * @param {?proto.roleypoly.DiscordUser|undefined} value
 * @return {!proto.roleypoly.discord.Member} returns this
*/
proto.roleypoly.discord.Member.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.roleypoly.discord.Member} returns this
 */
proto.roleypoly.discord.Member.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.roleypoly.discord.Member.prototype.hasUser = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.roleypoly.discord.ShardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.roleypoly.discord.ShardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.roleypoly.discord.ShardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.roleypoly.discord.ShardInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    shards: jspb.Message.getFieldWithDefault(msg, 1, 0),
    servers: jspb.Message.getFieldWithDefault(msg, 2, 0),
    users: jspb.Message.getFieldWithDefault(msg, 3, 0),
    roles: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.roleypoly.discord.ShardInfo}
 */
proto.roleypoly.discord.ShardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.roleypoly.discord.ShardInfo;
  return proto.roleypoly.discord.ShardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.roleypoly.discord.ShardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.roleypoly.discord.ShardInfo}
 */
proto.roleypoly.discord.ShardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShards(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsers(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.roleypoly.discord.ShardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.roleypoly.discord.ShardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.roleypoly.discord.ShardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.roleypoly.discord.ShardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShards();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServers();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUsers();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRoles();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 shards = 1;
 * @return {number}
 */
proto.roleypoly.discord.ShardInfo.prototype.getShards = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.roleypoly.discord.ShardInfo} returns this
 */
proto.roleypoly.discord.ShardInfo.prototype.setShards = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 servers = 2;
 * @return {number}
 */
proto.roleypoly.discord.ShardInfo.prototype.getServers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.roleypoly.discord.ShardInfo} returns this
 */
proto.roleypoly.discord.ShardInfo.prototype.setServers = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 users = 3;
 * @return {number}
 */
proto.roleypoly.discord.ShardInfo.prototype.getUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.roleypoly.discord.ShardInfo} returns this
 */
proto.roleypoly.discord.ShardInfo.prototype.setUsers = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 roles = 4;
 * @return {number}
 */
proto.roleypoly.discord.ShardInfo.prototype.getRoles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.roleypoly.discord.ShardInfo} returns this
 */
proto.roleypoly.discord.ShardInfo.prototype.setRoles = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.roleypoly.discord);
